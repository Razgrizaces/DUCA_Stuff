package com.drexel.duca.backend;

import java.io.*;
import java.net.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;

import com.drexel.duca.backend.Server1.ClientThread;
import com.drexel.duca.frontend.SafeTalkGUI;
import com.drexel.duca.frontend.ServerGUI;

public class Server {
	// a unique ID for each connection
		private static int uniqueId;
		// an ArrayList to keep the list of the Client
		private ArrayList<ClientThread> al;
		// if I am in a GUI
		private ServerGUI sg;
		// to display time
		private SimpleDateFormat sdf;
		// the port number to listen for connection
		private int port;
		// the boolean that will be turned of to stop the server
		private boolean keepGoing;
	
	public static void main(String[] args) throws IOException{
            ServerSocket ss = new ServerSocket(5556);
            Socket s = ss.accept();
            ReaderWriter wr = new ReaderWriter(System.in, s.getOutputStream(), true);
            ReaderWriter rw = new ReaderWriter(s.getInputStream(), System.out, false);
            rw.start(); wr.start();
            ss.close();
	}
	public void start() {
		keepGoing = true;
		/* create socket server and wait for connection requests */
		try 
		{
			// the socket used by the server
			ServerSocket serverSocket = new ServerSocket(port);

			// infinite loop to wait for connections
			while(keepGoing) 
			{
				// format message saying we are waiting
				display("Server waiting for Clients on port " + port + ".");
				
				Socket socket = serverSocket.accept();  	// accept connection
				// if I was asked to stop
				if(!keepGoing)
					break;
				ClientThread t = new ClientThread(socket);  // make a thread of it
				al.add(t);									// save it in the ArrayList
				t.start();
			}
			// I was asked to stop
			try {
				serverSocket.close();
				for(int i = 0; i < al.size(); ++i) {
					ClientThread tc = al.get(i);
					try {
					tc.sInput.close();
					tc.sOutput.close();
					tc.socket.close();
					}
					catch(IOException ioE) {
						// not much I can do
					}
				}
			}
			catch(Exception e) {
				display("Exception closing the server and clients: " + e);
			}
		}
		// something went bad
		catch (IOException e) {
            String msg = sdf.format(new Date()) + " Exception on new ServerSocket: " + e + "\n";
			display(msg);
		}
	}		
	synchronized void remove(int id) {
		// scan the array list until we found the Id
		for(int i = 0; i < al.size(); ++i) {
			ClientThread ct = al.get(i);
			// found it
			if(ct.id == id) {
				al.remove(i);
				return;
			}
		}
	}
	private void display(String msg) {
		String time = sdf.format(new Date()) + " " + msg;
		if(sg == null)
			System.out.println(time);
		else
			sg.appendEvent(time + "\n");
	}

}
