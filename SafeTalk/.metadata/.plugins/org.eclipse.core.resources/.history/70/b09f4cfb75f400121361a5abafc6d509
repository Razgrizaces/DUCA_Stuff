/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.drexel.duca.backend;

import com.drexel.duca.frontend.*;
import java.net.*;
import java.io.*;
import java.util.*;

public class Client  {

	// for I/O
	private ObjectInputStream sInput;		// to read from the socket
	private ObjectOutputStream sOutput;		// to write on the socket
	private Socket socket;

	// if I use a GUI or not
	private ChatWindow chatWindow;
	
	// the server, the port and the username
	private String server, username;
	private int port;

	/*
	 *  Constructor called by console mode
	 *  server: the server address
	 *  port: the port number
	 *  username: the username
	 */
	Client(String server, int port, String username) {
		// which calls the common constructor with the GUI set to null
		this(server, port, username, null);
	}
	

	/*
	 * Constructor call when used from a GUI
	 * in console mode the ClienGUI parameter is null
	 */
	public Client(String server, int port, String username, ChatWindow cw) {
		this.server = server;
		this.port = port;
		this.username = username;
		// save if we are in GUI mode or not
		this.chatWindow=cw;
	}
	
	/*
	 * To start the dialog
	 */
	public boolean start() {
		// try to connect to the server
		try {
			socket = new Socket(server, port);
		} 
		// if it failed not much I can so
		catch(Exception ec) {
			display("Error connectiong to server:" + ec);
			return false;
		}
		String msg = "Connection accepted " + socket.getInetAddress() + ":" + socket.getPort();
		display(msg);
		/* Creating both Data Stream */
		try
		{
			sInput  = new ObjectInputStream(socket.getInputStream());
			sOutput = new ObjectOutputStream(socket.getOutputStream());
		}
		catch (IOException eIO) {
			display("Exception creating new Input/output Streams: " + eIO);
			return false;
		}
		// creates the Thread to listen from the server 
		new ListenFromServer().start();
		// Send our username to the server this is the only message that we
		// will send as a String. All other messages will be ChatMessage objects
		try
		{
			sOutput.writeObject(username);
		}
		catch (IOException eIO) {
			display("Exception doing login : " + eIO);
			disconnect();
			return false;
		}
		// success we inform the caller that it worked
		return true;
	}

	/*
	 * To send a message to the console or the GUI
	 */
	private void display(String msg) {
		if(chatWindow == null)
		{
			System.out.println(msg);      // println in console mode
			//client.sendMessage(new ChatMessage(ChatMessage.getMESSAGE(), msg));
		}
		else
			chatWindow.append(msg + "\n");		// append to the ClientGUI JTextArea (or whatever)
	}
	
	/*
	 * To send a message to the server
	 */
	public void sendMessage(ChatMessage msg) {
		try {
			sOutput.writeObject(msg);
		}
		catch(IOException e) {
			display("Exception writing to server: " + e);
		}
	}

	/*
	 * When something goes wrong
	 * Close the Input/Output streams and disconnect not much to do in the catch clause
	 */
	void disconnect() {
		try { 
			if(sInput != null) sInput.close();
		}
		catch(Exception e) {} // not much else I can do
		try {
			if(sOutput != null) sOutput.close();
		}
		catch(Exception e) {} // not much else I can do
                try{
			if(socket != null) socket.close();
		}
		catch(Exception e) {} // not much else I can do
		
		// inform the GUI
		if(chatWindow != null)
			chatWindow.connectionFailed();
			
	}
	/*
	 * To start the Client in console mode use one of the following command
	 * > java Client
	 * > java Client username
	 * > java Client username portNumber
	 * > java Client username portNumber serverAddress
	 * at the console prompt
	 * If the portNumber is not specified 1500 is used
	 * If the serverAddress is not specified "localHost" is used
	 * If the username is not specified "Anonymous" is used
	 * > java Client 
	 * is equivalent to
	 * > java Client Anonymous 1500 localhost 
	 * are eqquivalent
	 * 
	 * In console mode, if an error occurs the program simply stops
	 * when a GUI id used, the GUI is informed of the disconnection
	 */
	public static void main(String[] args) {
		// default values
		int portNumber = 1500;
		String serverAddress = "localhost";
		String userName = "Anonymous";

		// depending of the number of arguments provided we fall through
		switch(args.length) {
			// > javac Client username portNumber serverAddr
			case 3:
				serverAddress = args[2];
			// > javac Client username portNumber
			case 2:
				try {
					portNumber = Integer.parseInt(args[1]);
				}
				catch(Exception e) {
					System.out.println("Invalid port number.");
					System.out.println("Usage is: > java Client [username] [portNumber] [serverAddress]");
					return;
				}
			// > javac Client username
			case 1: 
				userName = args[0];
			// > java Client
			case 0:
				break;
			// invalid number of arguments
			default:
				System.out.println("Usage is: > java Client [username] [portNumber] {serverAddress]");
			return;
		}
		// create the Client object
		Client client = new Client(serverAddress, portNumber, userName);
		// test if we can start the connection to the Server
		// if it failed nothing we can do
		if(!client.start())
			return;
		ChatWindow window= new ChatWindow(client);
		window.setVisible(true);
		
		// wait for messages from user
		Scanner scan = new Scanner(System.in);
		// loop forever for message from the user
		while(true) {
			System.out.print("> ");
			// read message from user
			String msg = scan.nextLine();
			// logout if message is LOGOUT
			if(msg.equalsIgnoreCase("LOGOUT")) {
				client.sendMessage(new ChatMessage(ChatMessage.getLOGOUT(), ""));
				// break to do the disconnect
				break;
			}
			// message WhoIsIn
			else if(msg.equalsIgnoreCase("WHOISIN")) {
				client.sendMessage(new ChatMessage(ChatMessage.getWHOISIN(), ""));				
			}
			else {				// default to ordinary message
				client.sendMessage(new ChatMessage(ChatMessage.getMESSAGE(), msg));
				window.receiveText(msg);
			}
		}
		// done disconnect
		client.disconnect();	
	}
    public static int getNthPrime(int n)
    {
        int p = 2;
        int out = 0;
        while(out<n)
        {
            p++;
            if(isPrime(p))
            {
                out++;
            }
        }
        return p;
    }
    public static boolean isPrime(int n)
    {
        boolean output = true;
        for(int i = 2; i<n;i++)
        {
            if(n%i==0)
            {
                output = false;
            }
                
        }
        return output;
    }
    public static int GCD(int a, int b)
    {
        if(b==0)
            return a;
        return GCD(b, a%b);
    }
    public static int getCoprime(int n)
    {
        int coprime = -1;
        for(int i = 1; i<3*n; i++)
        {
            if(GCD(i, n)==1)
              coprime = i;  
        }
        return coprime;
    }
    //count all numbers coprime to n, from 1 to n-1
    public static int totient(int n)
    {
        int count = 0;
        for(int i = 1; i<n; i++)
        {
            if(GCD(n, i)==1)
                count ++;
        }
        return count;
    }
    public static int modulo(int a, int b, int c)
    {
        long x = 1;
        long y = a;
        while(b>0)
        {
            if(b%2==1)
                x=(x*y)%c;
            y = (y*y)%c;
            b /=2;
        }
        return (int)x %c;
    }
    //@param word is any string.
    //E is any number coprime to M
    //c is a*b.
    public static int[] encrypt(String word, int e, int c)
    {
        int[] encryption =  new int [word.length()];
        if(word == null || word.length()==0)
        {
           return encryption;
        }
        for(int i = 0; i<word.length();i++)
        {
            int let = word.charAt(i);
            int enc = modulo(let, e, c);
            encryption[i]=enc;
        }
        return encryption;
    }
    //@Param 
    //int[] encrypted - an array of encrypted letters, numbers, or symbols.
    //int d = private key
    //int c = private key
    public static String decrypt(int[] encrypted, int d, int c)
    {
        if(encrypted.length==0)
        {
            return "";
        }
        int num = 0;
        String word = "";
        for(int i = 0; i<encrypted.length;i++)
        {
            num = encrypted[i];
            int dec = modulo(num, d, c);
            char ch = (char) dec;
            word = word+ch;
        }
        return word;
            //System.out.println("That decrypts to " +ch);
        
    }
    public static void printArray(int[] array)
    {
        for(int i =0; i < array.length;i++)
        {
            System.out.println(array[i]);
        }
    }
	/*
	 * a class that waits for the message from the server and append them to the JTextArea
	 * if we have a GUI or simply System.out.println() it in console mode
	 */

//	public static void main(String[] args) {
//        /*get 2 prime numbers; a,b.
//         C=a*b, m = totient(c) = (a-1)(b-1)
//        e = any number coprime to M.
//        d=modular inverse of e%m
//            r^(totient(m)-1) % m
//        public key is e, C.
//        private key is d, C*/
//        int a = getNthPrime((int)(Math.random()*100));
//        int b = getNthPrime((int)(Math.random()*100));
//        int c = a*b;
//        int m = (a-1)*(b-1);
//        int e = getCoprime(m);
//        int d = modulo(e, (totient(m)-1), m);
//        int x = 100;
//        int y = modulo(x, e, c);
//        int xx = modulo(y, d, c);
//        System.out.println("My Public key is (e= " + e + ", c =" +c +")");
//        System.out.println("My Private Key is (d= " + d + ", c =" +c + ")");
//        System.out.println(x + " encrypted to " + y + " and decrypted back to " + xx);
//        /*Scanner in = new Scanner(System.in);
//        System.out.println("Enter a secret word");
//        String word = in.nextLine();
//        for(int i = 0; i<word.length();i++)
//        {
//            int letter = word.charAt(i);
//            int enc = modulo(letter, e, c);
//            System.out.println(word.charAt(i) + " encrypts to " + enc);
//        }
//        Scanner in2 = new Scanner(System.in);
//        System.out.println("Enter your d and c");
//        int yourd = in2.nextInt();
//        int yourc = in2.nextInt();
//        int num = 0;
//        do{
//            System.out.println("enter a # to decrypt");
//            num = in.nextInt();
//            int dec = modulo(num, yourd, yourc);
//            char ch = (char) dec;
//            System.out.println("That decrypts to " +ch);
//        }
//            while(num!=2);*/
//        Scanner abcd = new Scanner(System.in);
//        String abcde = abcd.nextLine();
//       int[] encrypt = encrypt(abcde,  e, c);
//       printArray(encrypt);
//       String decrypt = decrypt(encrypt, d, c);   
//       System.out.println(decrypt);
//    }

}

